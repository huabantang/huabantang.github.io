{"meta":{"title":"LionKing","subtitle":"永远相信美好的事情即将来临","description":null,"author":"LionKing","url":"www.baidu.com","root":"/"},"pages":[{"title":"关于我","date":"2019-05-13T09:43:47.000Z","updated":"2019-05-30T09:57:33.364Z","comments":true,"path":"about/index.html","permalink":"www.baidu.com/about/index.html","excerpt":"","text":"95后程序员 分享计算机技术：Java、大数据、微服务，记录互联网点滴，学习商业洞察 地点：深圳 邮箱：zhishengfu@foxmail.com 微信公众号："}],"posts":[{"title":"Kafka扩容后如何将Partitions分区分配到新brokers节点上?kafka数据倾斜问题如何解决？","slug":"How-to-assign-Partitions-to-new-brokers-after-Kafka-expansion","date":"2019-05-22T01:43:47.000Z","updated":"2019-05-22T01:53:15.000Z","comments":true,"path":"2019/05/22/How-to-assign-Partitions-to-new-brokers-after-Kafka-expansion/","link":"","permalink":"www.baidu.com/2019/05/22/How-to-assign-Partitions-to-new-brokers-after-Kafka-expansion/","excerpt":"","text":"Kafka扩容后如何将Partitions分区分配到新brokers节点上?kafka数据倾斜问题如何解决？1.问题描述对kafka扩容增加brokers节点后，在Kakfa Maneger中已经看到新增的brokers节点已加入kafka集群，但是新增的brokers里并没有看到有topic存在。 2.原因在扩容之前就已经存在的topic并不会自动地分配分区到新节点上，除非扩容后新建的topic。这种情况只能手动将topic分区重新分配到brokers节点上(包括新增的brokers节点)，Kafka内部提供了相关的工具来重新分配topic的分区。 3.解决步骤3.1增加Partitions(分区)如果扩容后brokers节点数有5个，那么topic的Partitions数至少要等于节点数才能均匀分配在brokers上。若存在Partitions数少于brokers数的topic，就要对其增加Partitions。方法有两个：￭ 在kafka Maneger中选中topic，接着选择Add Partitions. ￭ 在服务器上执行命令：./bin/kafka-topics.sh –zookeeper ip:host,ip:host,ip:host –alter –partitions 5 –topic XXX(topic) 这样分区之后，会有一定的概率发生数据倾斜现象，但是这里先不管，之后的步骤中会重新分配分区，数据倾斜问题将会解决。 3.2重新分配PartitionsPartitions增加好之后，就要将其重新均匀分配到各个brokers上(包括新增的brokers节点)，Kafka提供重新分配分区的工具：kafka-reassign-partitions.sh，它有了3中工作模式： ￭ generate模式，给定需要重新分配的topic，自动生成reassign plan（只是生成，并不执行）￭ execute模式，根据指定的reassign plan重新分配Partition￭ verify模式，验证重新分配Partition是否成功 3.2.1生成topics-to-move.json文件在Kafka目录下生成topics-to-move.json文件，一定要是json格式，它指定哪些topic需要分区，可以同时指定多个topic: {&quot;topics&quot;: [{&quot;topic&quot;: &quot;topic1&quot;}, {&quot;topic&quot;: &quot;topic2&quot;}], &quot;version&quot;:1 } 3.2.2生成reassign plan topics-to-move.json文件建好之后，执行以下命令，生成分配计划，需要指定brokers-list: ./bin/kafka-reassign-partitions.sh –zookeeper ip:host,ip:host,ip:host –topics-to-move-json-file topics-to-move.json –broker-list “0,1,2,3,4” –generate 执行命令的结果中Proposed partition reassignment configuration下面生成的就是将分区重新分配到目前所有brokers上的结果。将这些内容保存到名为result.json文件里面（文件名不重要，只要保证内容是json格式即可），然后执行这些reassign plan： 3.2.3执行reassign plan输入以下命令即可执行成功：bin/kafka-reassign-partitions.sh –zookeeper ip:host,ip:host,ip:host –reassignment-json-file result.json –execute 3.2.4查看执行reassign plan结果输入以下命令即可：bin/kafka-reassign-partitions.sh –zookeeper ip:host,ip:host,ip:host –reassignment-json-file result.json –verify 注：如果需要执行多个重新分配分区计划，需要等本次完全分配好之后才能接着继续执行剩下的计划。 执行以上命令之后，topic的分区将会均匀分配到brokers节点上，之前的数据倾斜问题也会被解决。","categories":[{"name":"大数据","slug":"大数据","permalink":"www.baidu.com/categories/大数据/"}],"tags":[{"name":"大数据","slug":"大数据","permalink":"www.baidu.com/tags/大数据/"}]},{"title":"两数之和","slug":"Two_Sum","date":"2019-05-13T10:01:02.000Z","updated":"2019-05-15T06:09:09.000Z","comments":true,"path":"2019/05/13/Two_Sum/","link":"","permalink":"www.baidu.com/2019/05/13/Two_Sum/","excerpt":"","text":"两数之和 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。 示例： 给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1] 这是两数之和的问题，看似很简单，读者可以先思考下如何实现。本文介绍三种实现方式，并且分析复杂度。 *1***. 暴力法**遍历每个元素 xx，并查找是否存在一个值与 target - xtarget−x 相等的目标元素。代码示例如下： public int[] twoSum(int[] nums, int target) { int[] result = new int[2]; for(int i = 0; i &lt; nums.length; i++) { for(int j = i + 1; j &lt; nums.length; j++) { if(nums[i] + nums[j] == target) { result[0] = i; result[1] = j; return result; } } } return result; } 算法复杂度分析： 时间复杂度：O(n^2)，空间复杂度：O(1) 对于每个元素，我们试图通过遍历数组的其余部分来寻找它所对应的目标元素，这将耗费 O(n) 的时间，因此时间复杂度为 O(n^2)。 *2***. 两遍哈希表**为了对时间复杂度进行优化，我们需要更有效的方法来检查数组中是否存在目标元素。如果存在，我们需要找出它的索引。 保持数组中的每个元素与其索引相互对应的最好方法是什么？哈希表。 通过以空间换取速度的方式，我们可以将查找时间从 O(n) 降低到 O(1)。 哈希表正是为此目的而构建的，它支持以近似恒定的时间进行快速查找。 我用“近似”来描述，是因为一旦出现冲突，查找用时可能会退化到 O(n)。 但只要你仔细地挑选哈希函数，在哈希表中进行查找的用时应当被摊销为 O(1)。 一个简单的实现使用了两次迭代。在第一次迭代中，我们将每个元素的值和它的索引添加到表中。 然后，在第二次迭代中，我们将检查每个元素所对应的目标元素（target - nums[i]）是否存在于表中。 注意，该目标元素不能是 nums[i] 本身！ public int[] twoSum(int[] nums, int target) { Mapmap = new HashMap&lt;&gt;(); for (int i = 0; i &lt; nums.length; i++) { map.put(nums[i], i); } for (int i = 0; i &lt; nums.length; i++) { int complement = target - nums[i]; if (map.containsKey(complement) &amp;&amp; map.get(complement) != i) { return new int[] { i, map.get(complement) }; } } throw new IllegalArgumentException(&quot;No two sum solution&quot;); } 复杂度分析： 时间复杂度：O(n)， 我们把包含有 n 个元素的列表遍历两次。由于哈希表将查找时间缩短到 O(1) ，所以时间复杂度为 O(n)。 空间复杂度：O(n)， 所需的额外空间取决于哈希表中存储的元素数量，该表中存储了 n 个元素。 *3***. 一遍哈希表**事实证明，我们可以一次完成。在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。 如果它存在，那我们已经找到了对应解，并立即将其返回。 public int[] twoSum(int[] nums, int target) { Mapmap = new HashMap&lt;&gt;(); for (int i = 0; i &lt; nums.length; i++) { int complement = target - nums[i]; if (map.containsKey(complement)) { return new int[] { map.get(complement), i }; } map.put(nums[i], i); } throw new IllegalArgumentException(&quot;No two sum solution&quot;); } 复杂度分析： 时间复杂度：O(n)， 我们只遍历了包含有 nn 个元素的列表一次。在表中进行的每次查找只花费 O(1) 的时间。 空间复杂度：O(n)， 所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储 n 个元素。","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"www.baidu.com/tags/算法/"},{"name":"数据结构","slug":"数据结构","permalink":"www.baidu.com/tags/数据结构/"}]},{"title":"给出一个数组，求出现次数最多的那个数字及其出现次数","slug":"Find_the_number_of_occurrences_in_the_array and_the_number_of_occurrences","date":"2019-05-13T09:43:47.000Z","updated":"2019-05-15T06:08:51.000Z","comments":true,"path":"2019/05/13/Find_the_number_of_occurrences_in_the_array and_the_number_of_occurrences/","link":"","permalink":"www.baidu.com/2019/05/13/Find_the_number_of_occurrences_in_the_array and_the_number_of_occurrences/","excerpt":"","text":"给出一个数组，求出现次数最多的那个数字及其出现次数用HashMap&lt;Integer, Integer&gt;,数组元素做key，出现次数做value;遍历数组，出现一次，value++； 代码： public class CountNumber{ public static void mian(String[] args){ int[] arr = {1,2,3,4,8,2,2,5,3,1,2,4,5,2} int[] ans = maxTimsx(arr); System.out.println(&quot;数字：&quot; + ans[0] + &quot;出现&quot; + ans[1] + &quot;次&quot;) } public static int[] maxTimes(int[] arr){ if(arr == null || arr.length &lt; 1){ return null; } HashMap&lt;Integer,Integer&gt; map = new HashMap&lt;Integer,Integer&gt;(); int times = 0; int number = 0; for(i=0;i&lt;arr.length;i++){ if(map.get(arr.[i]) == null){ map.put(arr[i],1) } }else{ integer value = map.get(arr[i]) + 1; map.put(arr[i],value) if(value &gt; times){ times = value; number = arr[i]; } } return new int[] {number,times}; } }","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"www.baidu.com/tags/算法/"},{"name":"数据结构","slug":"数据结构","permalink":"www.baidu.com/tags/数据结构/"}]},{"title":"判断链表是否有环","slug":"Determine_if_the_linked_list_has_a_ring","date":"2019-05-13T09:43:47.000Z","updated":"2019-05-15T06:08:40.000Z","comments":true,"path":"2019/05/13/Determine_if_the_linked_list_has_a_ring/","link":"","permalink":"www.baidu.com/2019/05/13/Determine_if_the_linked_list_has_a_ring/","excerpt":"","text":"判断链表是否有环问题描述 判断链表是否有环 单链表中的环是指链表末尾的节点的 next 指针不为 NULL ，而是指向了链表中的某个节点，导致链表中出现了环形结构。 快慢指针法解题思想 （1）定义两个指针分别为 slow，fast，并且将指针均指向链表头节点。 （2）规定，slow 指针每次前进 1 个节点，fast 指针每次前进两个节点。 （3）当 slow 与 fast 相等，且二者均不为空，则链表存在环。 图解过程：无环过程： 通过图解过程可以看出，若表中不存在环形，fast 与 slow 指针只能在链表末尾相遇。 有环过程： 图解过程可以看出，若链表中存在环，则快慢指针必然能在环中相遇。这就好比在环形跑道中进行龟兔赛跑。由于兔子速度大于乌龟速度，则必然会出现兔子与乌龟再次相遇情况。因此，当出现快慢指针相等时，且二者不为NULL，则表明链表存在环。 代码实现bool isExistLoop(ListNode* pHead) { ListNode* fast;//慢指针，每次前进一个节点 ListNode* slow;//快指针，每次前进2个节点 slow = fast = pHead ; //两个指针均指向链表头节点 //当没有到达链表结尾，则继续前进 while (slow != NULL &amp;&amp; fast -&gt; next != NULL) { slow = slow -&gt; next ; //慢指针前进一个节点 fast = fast -&gt; next -&gt; next ; //快指针前进两个节点 if (slow == fast) //若两个指针相遇，且均不为NULL则存在环 return true ; } //到达末尾仍然没有相遇，则不存在环 return false ; }","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"www.baidu.com/tags/算法/"},{"name":"数据结构","slug":"数据结构","permalink":"www.baidu.com/tags/数据结构/"}]},{"title":"输出单链表倒数第 K 个节点","slug":"Output_the_singly_linked_list_to_the_Kth_node","date":"2019-05-13T09:43:47.000Z","updated":"2019-05-15T06:09:00.000Z","comments":true,"path":"2019/05/13/Output_the_singly_linked_list_to_the_Kth_node/","link":"","permalink":"www.baidu.com/2019/05/13/Output_the_singly_linked_list_to_the_Kth_node/","excerpt":"","text":"输出单链表倒数第 K 个节点问题描述 输入一个单链表，输出此链表中的倒数第 K 个节点。（去除头结点，节点计数从 1 开始）。 双指针法解题思想 （1）定义两个指针 p1 和 p2 分别指向链表头节点。（2）p1 前进 K 个节点，则 p1 与 p2 相距 K 个节点。（3）p1，p2 同时前进，每次前进 1 个节点。（4）当 p1 指向到达链表末尾，由于 p1 与 p2 相距 K 个节点，则 p2 指向目标节点。 图解过程 代码实现 ListNode* findKthTail(ListNode *pHead, int K){ if (NULL == pHead || K == 0) return NULL; //p1，p2均指向头节点 ListNode *p1 = pHead; ListNode *p2 = pHead; //p1先出发，前进K个节点 for (int i = 0; i &lt; K; i++) { if (p1)//防止k大于链表节点的个数 p1 = p1-&gt;_next; else return NULL; } while (p1)//如果p1没有到达链表结尾，则p1，p2继续遍历 { p1 = p1-&gt;_next; p2 = p2-&gt;_next; } return p2;//当p1到达末尾时，p2正好指向倒数第K个节点 }","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"www.baidu.com/tags/算法/"},{"name":"数据结构","slug":"数据结构","permalink":"www.baidu.com/tags/数据结构/"}]}]}